{"version":3,"sources":["Components/PersonsView.js","Components/PersonForm.js","Components/Filter.js","Services/persons.js","Components/Notification.js","App.js","index.js"],"names":["PersonsView","props","persons","map","person","name","number","onClick","deleteHandler","id","PersonForm","onChange","nameChange","numberChange","type","submit","filter","searchString","trim","length","toLowerCase","includes","Filter","searchChange","baseUrl","axios","get","then","response","data","newObject","post","put","delete","Notification","message","className","App","useState","setPersons","filteredPersons","setFilteredPersons","newName","setNewName","newNumber","setNewNumber","searchTerm","setSearchTerm","notification","setNotification","notificationType","setNotificationType","updateState","newPersons","notify","setTimeout","useEffect","console","log","personService","initialPersons","event","target","value","preventDefault","existingPersons","newPerson","window","confirm","updatedPerson","concat","catch","error","createdPerson","personToDelete","existingPerson","ReactDOM","render","document","getElementById"],"mappings":"6KAceA,EAbK,SAACC,GACjB,OACI,qCACA,yCAEIA,EAAMC,QAAQC,KAAI,SAACC,GACf,OAAQ,gCAAsBA,EAAOC,KAAO,IAAMD,EAAOE,OAAjD,IAAyD,wBAAQC,QAAS,kBAAMN,EAAMO,cAAcJ,IAA3C,sBAA/CA,EAAOK,WCW1BC,EAlBI,SAACT,GAEhB,OACI,qCACI,2CAEA,iCACA,yCAAW,uBAAOU,SAAUV,EAAMW,gBAClC,2CAAa,uBAAOD,SAAUV,EAAMY,kBAEpC,8BACA,wBAAQC,KAAK,SAASP,QAASN,EAAMc,OAArC,0BCXL,SAASC,EAAOC,EAAcf,GACjC,OAAkC,IAA/Be,EAAaC,OAAOC,OACZjB,EAEJA,EAAQc,QAAO,SAACZ,GAAD,OAAYA,EAAOC,KAAKe,cAAcC,SAASJ,EAAaC,OAAOE,kBAG7F,IAMeE,EANA,SAACrB,GACZ,OACE,qDAAuB,uBAAOU,SAAUV,EAAMsB,mB,gBCR9CC,EAAU,eAkBD,EAhBO,WAClB,OAAOC,IAAMC,IAAIF,GAASG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAezC,EAZK,SAAAC,GAChB,OAAOL,IAAMM,KAAKP,EAASM,GAAWH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAWrD,EARK,SAACpB,EAAIqB,GACrB,OAAOL,IAAMO,IAAN,UAAaR,EAAb,YAAwBf,GAAMqB,GAAWH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAO/D,EAJK,SAACpB,GACjB,OAAOgB,IAAMQ,OAAN,UAAgBT,EAAhB,YAA2Bf,IAAMkB,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCJvDK,EAZM,SAACjC,GAClB,OAAsB,OAAlBA,EAAMkC,QACC,KAIX,qBAAKC,UAAWnC,EAAMa,KAAtB,SACKb,EAAMkC,WCuGAE,EAtGH,WACV,MAA+BC,mBAAS,IAAxC,mBAAQpC,EAAR,KAAiBqC,EAAjB,KACA,EAA+CD,mBAASpC,GAAxD,mBAAQsC,EAAR,KAAyBC,EAAzB,KACA,EAAgCH,mBAAS,IAAzC,mBAAQI,EAAR,KAAiBC,EAAjB,KACA,EAAoCL,mBAAS,IAA7C,mBAAQM,EAAR,KAAmBC,EAAnB,KACA,EAAqCP,mBAAS,IAA9C,mBAAQQ,EAAR,KAAoBC,EAApB,KACA,EAAyCT,mBAAS,IAAlD,mBAAQU,EAAR,KAAsBC,EAAtB,KACA,EAAiDX,mBAAS,IAA1D,mBAAQY,EAAR,KAA0BC,EAA1B,KAaA,SAASC,EAAYC,GACnBd,EAAWc,GACXZ,EAAmBzB,EAAO8B,EAAWO,IAGvC,SAASC,EAAOnB,EAASrB,GACvBmC,EAAgBd,GAChBgB,EAAoBrC,GACpByC,YAAW,WACTN,EAAgB,MAChBE,EAAoB,MACnB,KAbLK,qBATa,WACXC,QAAQC,IAAI,UACZC,IACGhC,MAAK,SAAAiC,GACJrB,EAAWqB,GACXnB,EAAmBmB,QAIT,IAwEf,OACC,gCACE,2CACA,cAAC,EAAD,CAAczB,QAASa,EAAclC,KAAMoC,IAC3C,cAAC,EAAD,CAAQ3B,aATS,SAACsC,GACpBd,EAAcc,EAAMC,OAAOC,OAC3BtB,EAAmBzB,EAAO6C,EAAMC,OAAOC,MAAO7D,OAQ5C,cAAC,EAAD,CAAYW,aAAc,SAACgD,GAAD,OAAWhB,EAAagB,EAAMC,OAAOC,QAAQnD,WAAY,SAACiD,GAAD,OAAWlB,EAAWkB,EAAMC,OAAOC,QAAQhD,OA7D5G,SAAC8C,GACrBA,EAAMG,iBACN,IAAIC,EAAkB/D,EAAQc,QAAO,SAACZ,GAAD,OAAYA,EAAOC,OAASqC,KAE7DwB,EAAY,CACd7D,KAAMqC,EACNpC,OAAQsC,GAGV,GAAGqB,EAAgB9C,OAAO,EAAE,CAC1B,IAAKgD,OAAOC,QAAQ,UAAY1B,GAC9B,OAEFiB,EAA0BM,EAAgB,GAAGxD,GAAIyD,GAChDvC,MAAM,SAAA0C,GAELjB,EADiBlD,EAAQc,QAAO,SAAAZ,GAAM,OAAIA,EAAOK,KAAO4D,EAAc5D,MAAI6D,OAAOD,IAEjFf,EAAO,WAAaY,EAAU7D,KAAM,mBACnCkE,OAAM,SAAAC,GACPlB,EAAO,oBAAsBY,EAAU7D,KAAM,iBAI/CsD,EAA0BO,GACzBvC,MAAK,SAAA8C,GAEJrB,EADiBlD,EAAQoE,OAAOG,IAEhCnB,EAAO,WAAaY,EAAU7D,KAAM,sBAmCtC,cAAC,EAAD,CAAaH,QAASsC,EAAiBhC,cA9BrB,SAACkE,GAChBP,OAAOC,QAAQ,UAAYM,EAAerE,OAG/CsD,EAA0Be,EAAejE,IACtCkB,MAAM,WAELyB,EADiBlD,EAAQc,QAAO,SAAA2D,GAAc,OAAIA,EAAelE,KAAOiE,EAAejE,OAEvF6C,EAAO,WAAaoB,EAAerE,KAAM,mBACxCkE,OAAM,SAAAC,GACPlB,EAAO,oBAAsBoB,EAAerE,KAAM,SAClDsD,IACChC,MAAK,SAAAiC,GACJrB,EAAWqB,GACXnB,EAAmBmB,gB,MCpF7BgB,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.a6f0ac35.chunk.js","sourcesContent":["\r\nconst PersonsView = (props) => {\r\n    return (\r\n        <>\r\n        <h2>Numbers</h2>\r\n        {\r\n            props.persons.map((person)=>{\r\n                return (<div key={person.id}>{person.name + \" \" + person.number} <button onClick={() => props.deleteHandler(person)}>delete</button></div>)\r\n            })\r\n        }\r\n        </>\r\n    )\r\n\r\n}\r\nexport default PersonsView","const PersonForm = (props) => {\r\n\r\n    return (\r\n        <>\r\n            <h2>add a new</h2>\r\n\r\n            <form>\r\n            <div>name: <input onChange={props.nameChange}/></div>\r\n            <div>number: <input onChange={props.numberChange}/></div>\r\n\r\n            <div>\r\n            <button type=\"submit\" onClick={props.submit}>add</button>\r\n            </div>\r\n            </form>\r\n        </>\r\n    )\r\n\r\n}\r\nexport default PersonForm","export function filter(searchString, persons){\r\n    if(searchString.trim().length === 0){\r\n        return persons\r\n    }\r\n    return persons.filter((person) => person.name.toLowerCase().includes(searchString.trim().toLowerCase()))\r\n}\r\n\r\nconst Filter = (props) => {\r\n    return (\r\n      <div>filter shown with <input onChange={props.searchChange}/></div>\r\n    )\r\n\r\n}\r\nexport default Filter\r\n","import axios from 'axios'\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAllEntries = () => {\r\n    return axios.get(baseUrl).then(response => response.data)\r\n}\r\n\r\nconst createEntry = newObject => {\r\n    return axios.post(baseUrl, newObject).then(response => response.data)\r\n}\r\n\r\nconst updateEntry = (id, newObject) => {\r\n    return axios.put(`${baseUrl}/${id}`, newObject).then(response => response.data)\r\n}\r\n\r\nconst deleteEntry = (id) => {\r\n    return axios.delete(`${baseUrl}/${id}`).then(response => response.data)\r\n}\r\n  \r\nexport default { getAllEntries, createEntry, updateEntry, deleteEntry }","const Notification = (props) => {\r\n    if (props.message === null) {\r\n        return null\r\n    }\r\n    \r\n    return (\r\n    <div className={props.type}>\r\n        {props.message}\r\n    </div>\r\n    )\r\n\r\n}\r\nexport default Notification","import React, { useState, useEffect } from 'react'\nimport PersonsView from './Components/PersonsView'\nimport PersonForm from './Components/PersonForm'\nimport Filter from './Components/Filter'\nimport { filter } from './Components/Filter'\nimport personService from './Services/persons'\nimport Notification from './Components/Notification'\n\nconst App = () => {\n  const [ persons, setPersons] = useState([])\n  const [ filteredPersons, setFilteredPersons] = useState(persons)\n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ searchTerm, setSearchTerm] = useState('')\n  const [ notification, setNotification] = useState('')\n  const [ notificationType, setNotificationType] = useState('')\n\n  const hook = () => {\n    console.log('effect')\n    personService.getAllEntries()\n      .then(initialPersons => {\n        setPersons(initialPersons)\n        setFilteredPersons(initialPersons)\n      })\n  }\n  \n  useEffect(hook, [])\n  \n  function updateState(newPersons){\n    setPersons(newPersons)\n    setFilteredPersons(filter(searchTerm,newPersons))\n  }\n\n  function notify(message, type){\n    setNotification(message)\n    setNotificationType(type)\n    setTimeout(() => {\n      setNotification(null)\n      setNotificationType('')\n    }, 5000)\n  }\n\n  const SubmitHandler = (event) => {\n    event.preventDefault()\n    let existingPersons = persons.filter((person) => person.name === newName)\n    \n    let newPerson = {\n      name: newName,\n      number: newNumber,\n    }\n\n    if(existingPersons.length>0){\n      if (!window.confirm(\"Update \" + newName)){\n        return;\n      }\n      personService.updateEntry(existingPersons[0].id, newPerson)\n      .then( updatedPerson => {\n        let newPersons = persons.filter(person => person.id !== updatedPerson.id).concat(updatedPerson)\n        updateState(newPersons)\n        notify('Updated ' + newPerson.name, 'confirmation')\n      }).catch(error => {\n        notify('Could not update ' + newPerson.name, 'error')\n      })\n      \n    } else {\n      personService.createEntry(newPerson)\n      .then(createdPerson => {\n        let newPersons = persons.concat(createdPerson)\n        updateState(newPersons)\n        notify('Created ' + newPerson.name, 'confirmation')\n      })\n    }\n  }\n\n  const DeleteHandler = (personToDelete) => {\n    if (!window.confirm(\"Delete \" + personToDelete.name)){\n      return;\n    }\n    personService.deleteEntry(personToDelete.id)\n      .then( () => {\n        let newPersons = persons.filter(existingPerson => existingPerson.id !== personToDelete.id)\n        updateState(newPersons)\n        notify('Deleted ' + personToDelete.name, 'confirmation')\n      }).catch(error => {\n        notify('Could not delete ' + personToDelete.name, 'error')\n        personService.getAllEntries()\n        .then(initialPersons => {\n          setPersons(initialPersons)\n          setFilteredPersons(initialPersons)\n        })\n      })\n  }\n\n  const SearchChange = (event) => {\n    setSearchTerm(event.target.value)\n    setFilteredPersons(filter(event.target.value, persons))\n  }\n\n   return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={notification} type={notificationType} />\n      <Filter searchChange={SearchChange} />\n      <PersonForm numberChange={(event) => setNewNumber(event.target.value)} nameChange={(event) => setNewName(event.target.value)} submit={SubmitHandler} />\n      <PersonsView persons={filteredPersons} deleteHandler={DeleteHandler} />\n    </div>\n  )\n}\n\n\nexport default App","import ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)"],"sourceRoot":""}